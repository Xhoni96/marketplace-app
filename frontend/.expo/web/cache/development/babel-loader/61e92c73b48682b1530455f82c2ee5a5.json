{"ast":null,"code":"import StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport React from \"react\";\nimport { Picker } from \"@react-native-picker/picker\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport { AppButton, AppTextInput, ErrorMessage, Screen } from \"../components\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar schema = z.object({\n  title: z.string().min(1, {\n    message: \"Title is Required\"\n  }),\n  price: z.number().positive(),\n  category: z.string().min(1, {\n    message: \"Category is Required\"\n  })\n});\nexport var ListingEditScreen = function ListingEditScreen() {\n  var _errors$title, _errors$price, _errors$category;\n\n  var _useForm = useForm({\n    resolver: zodResolver(schema),\n    defaultValues: {\n      title: \"\",\n      price: \"\",\n      category: \"\"\n    }\n  }),\n      control = _useForm.control,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.formState.errors;\n\n  var onSubmit = function onSubmit() {\n    return null;\n  };\n\n  return _jsxs(Screen, {\n    style: styles.container,\n    children: [_jsx(Controller, {\n      control: control,\n      rules: {\n        required: true\n      },\n      render: function render(_ref) {\n        var _ref$field = _ref.field,\n            onChange = _ref$field.onChange,\n            onBlur = _ref$field.onBlur,\n            value = _ref$field.value;\n        return _jsx(AppTextInput, {\n          placeholder: \"Title\",\n          onChangeText: onChange,\n          onBlur: onBlur,\n          value: value,\n          autoFocus: true\n        });\n      },\n      name: \"title\"\n    }), _jsx(ErrorMessage, {\n      error: (_errors$title = errors.title) == null ? void 0 : _errors$title.message,\n      visible: true\n    }), _jsx(Controller, {\n      control: control,\n      rules: {\n        required: true\n      },\n      render: function render(_ref2) {\n        var _ref2$field = _ref2.field,\n            onChange = _ref2$field.onChange,\n            value = _ref2$field.value;\n        return _jsx(AppTextInput, {\n          placeholder: \"Price\",\n          onChangeText: onChange,\n          value: value,\n          type: \"number\",\n          keyboardType: \"numeric\"\n        });\n      },\n      name: \"price\"\n    }), _jsx(ErrorMessage, {\n      error: (_errors$price = errors.price) == null ? void 0 : _errors$price.message,\n      visible: true\n    }), _jsx(Controller, {\n      control: control,\n      rules: {\n        required: true\n      },\n      render: function render(_ref3) {\n        var _ref3$field = _ref3.field,\n            onChange = _ref3$field.onChange,\n            value = _ref3$field.value;\n        return _jsxs(Picker, {\n          style: {\n            marginTop: -65,\n            marginBottom: 10,\n            padding: 0\n          },\n          enabled: false,\n          mode: \"dropdown\",\n          selectedValue: value,\n          onValueChange: onChange,\n          children: [_jsx(Picker.Item, {\n            label: \"Category\",\n            value: \"category\"\n          }), _jsx(Picker.Item, {\n            label: \"Java\",\n            value: \"java\"\n          }), _jsx(Picker.Item, {\n            label: \"JavaScript\",\n            value: \"js\"\n          })]\n        });\n      },\n      name: \"category\"\n    }), _jsx(ErrorMessage, {\n      error: (_errors$category = errors.category) == null ? void 0 : _errors$category.message,\n      visible: true\n    }), _jsx(AppTextInput, {\n      placeholder: \"Descripton\"\n    }), _jsx(AppButton, {\n      title: \"POST\",\n      onPress: handleSubmit(onSubmit)\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 10\n  }\n});","map":{"version":3,"sources":["/Users/johnn/Documents/Johnny stuff/ReactNative/marketplace-app/marketplace-app/app/screens/ListingEditScreen.jsx"],"names":["React","Picker","useForm","Controller","zodResolver","z","AppButton","AppTextInput","ErrorMessage","Screen","schema","object","title","string","min","message","price","number","positive","category","ListingEditScreen","resolver","defaultValues","control","handleSubmit","errors","formState","onSubmit","styles","container","required","field","onChange","onBlur","value","marginTop","marginBottom","padding","StyleSheet","create","paddingHorizontal"],"mappings":"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","sourcesContent":["import { StyleSheet } from \"react-native\";\nimport React from \"react\";\nimport { Picker } from \"@react-native-picker/picker\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\n\nimport { AppButton, AppTextInput, ErrorMessage, Screen } from \"../components\";\n\nconst schema = z.object({\n    title: z.string().min(1, { message: \"Title is Required\" }),\n    price: z.number().positive(),\n    category: z.string().min(1, { message: \"Category is Required\" }),\n});\n\nexport const ListingEditScreen = () => {\n    const {\n        control,\n        handleSubmit,\n        formState: { errors },\n    } = useForm({\n        resolver: zodResolver(schema),\n        defaultValues: {\n            title: \"\",\n            price: \"\",\n            category: \"\",\n        },\n        // mode: \"onChange\",\n    });\n\n    const onSubmit = (/* data */) => null; /* console.log(data) */\n    // console.log(errors, \"error\");\n    // console.log(formState, \"formState\");\n    return (\n        <Screen style={styles.container}>\n            <Controller\n                control={control}\n                rules={{\n                    required: true,\n                }}\n                render={({ field: { onChange, onBlur, value } }) => (\n                    <AppTextInput placeholder=\"Title\" onChangeText={onChange} onBlur={onBlur} value={value} autoFocus />\n                )}\n                name=\"title\"\n            />\n            <ErrorMessage error={errors.title?.message} visible />\n\n            <Controller\n                control={control}\n                rules={{\n                    required: true,\n                }}\n                render={({ field: { onChange, value } }) => (\n                    <AppTextInput\n                        placeholder=\"Price\"\n                        onChangeText={onChange}\n                        value={value}\n                        type=\"number\"\n                        keyboardType=\"numeric\"\n                    />\n                )}\n                name=\"price\"\n            />\n            <ErrorMessage error={errors.price?.message} visible />\n\n            <Controller\n                control={control}\n                rules={{\n                    required: true,\n                }}\n                render={({ field: { onChange, value } }) => (\n                    <Picker\n                        style={{ marginTop: -65, marginBottom: 10, padding: 0 }}\n                        // itemStyle=\"uppercase\"\n                        enabled={false}\n                        // label=\"JavaScript\"\n                        mode=\"dropdown\"\n                        selectedValue={value}\n                        onValueChange={onChange}\n                        // onValueChange={(itemValue) => onChange(itemValue)}\n                    >\n                        <Picker.Item label=\"Category\" value=\"category\" />\n                        <Picker.Item label=\"Java\" value=\"java\" />\n                        <Picker.Item label=\"JavaScript\" value=\"js\" />\n                    </Picker>\n                )}\n                name=\"category\"\n            />\n            <ErrorMessage error={errors.category?.message} visible />\n\n            <AppTextInput placeholder=\"Descripton\" />\n\n            <AppButton title=\"POST\" onPress={handleSubmit(onSubmit)} />\n        </Screen>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        paddingHorizontal: 10,\n    },\n});\n"]},"metadata":{},"sourceType":"module"}