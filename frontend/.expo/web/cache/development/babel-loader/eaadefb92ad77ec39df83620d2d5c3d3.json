{"ast":null,"code":"import StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport React from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport { redLogo } from \"../assets/icons\";\nimport { AppTextInput, AppButton, Screen, ErrorMessage } from \"../components\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar schema = z.object({\n  email: z.string().email().min(1, {\n    message: \"Email is Required\"\n  }),\n  password: z.string().min(4, {\n    message: \"Password must be at least 4 characters \"\n  })\n});\nexport var LoginScreen = function LoginScreen() {\n  var _errors$email, _errors$password;\n\n  var _useForm = useForm({\n    resolver: zodResolver(schema),\n    defaultValues: {\n      email: \"\",\n      password: \"\"\n    },\n    mode: \"onChange\"\n  }),\n      control = _useForm.control,\n      handleSubmit = _useForm.handleSubmit,\n      _useForm$formState = _useForm.formState,\n      errors = _useForm$formState.errors,\n      dirtyFields = _useForm$formState.dirtyFields,\n      isValid = _useForm$formState.isValid;\n\n  var onSubmit = function onSubmit() {\n    return null;\n  };\n\n  return _jsxs(Screen, {\n    style: styles.container,\n    children: [_jsx(Image, {\n      style: styles.logo,\n      source: redLogo\n    }), _jsx(Controller, {\n      control: control,\n      rules: {\n        required: true\n      },\n      render: function render(_ref) {\n        var _ref$field = _ref.field,\n            onChange = _ref$field.onChange,\n            onBlur = _ref$field.onBlur,\n            value = _ref$field.value;\n        return _jsx(AppTextInput, {\n          icon: \"email\",\n          placeholder: \"Email\",\n          autoCapitalize: \"none\",\n          autoCorrect: false,\n          keyboardType: \"email-address\",\n          textContentType: \"emailAddress\",\n          onBlur: onBlur,\n          onChangeText: onChange,\n          value: value\n        });\n      },\n      name: \"email\"\n    }), _jsx(ErrorMessage, {\n      error: (_errors$email = errors.email) == null ? void 0 : _errors$email.message,\n      visible: dirtyFields.email\n    }), _jsx(Controller, {\n      control: control,\n      rules: {\n        required: true\n      },\n      render: function render(_ref2) {\n        var _ref2$field = _ref2.field,\n            onChange = _ref2$field.onChange,\n            onBlur = _ref2$field.onBlur,\n            value = _ref2$field.value;\n        return _jsx(AppTextInput, {\n          icon: \"lock\",\n          placeholder: \"Password\",\n          secureTextEntry: true,\n          textContentType: \"password\",\n          onBlur: onBlur,\n          onChangeText: onChange,\n          value: value\n        });\n      },\n      name: \"password\"\n    }), _jsx(ErrorMessage, {\n      error: (_errors$password = errors.password) == null ? void 0 : _errors$password.message,\n      visible: dirtyFields.password\n    }), _jsx(AppButton, {\n      disabled: !isValid,\n      title: \"Login\",\n      onPress: handleSubmit(onSubmit)\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    paddingTop: 50,\n    paddingHorizontal: 10\n  },\n  logo: {\n    width: 80,\n    height: 80,\n    marginBottom: 10,\n    alignSelf: \"center\"\n  }\n});","map":{"version":3,"sources":["/Users/johnn/Documents/Johnny stuff/ReactNative/marketplace-app/marketplace-app/app/screens/LoginScreen.jsx"],"names":["React","useForm","Controller","zodResolver","z","redLogo","AppTextInput","AppButton","Screen","ErrorMessage","schema","object","email","string","min","message","password","LoginScreen","resolver","defaultValues","mode","control","handleSubmit","formState","errors","dirtyFields","isValid","onSubmit","styles","container","logo","required","field","onChange","onBlur","value","StyleSheet","create","paddingTop","paddingHorizontal","width","height","marginBottom","alignSelf"],"mappings":"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","sourcesContent":["import { StyleSheet, Image } from \"react-native\";\nimport React from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\n\nimport { redLogo } from \"../assets/icons\";\nimport { AppTextInput, AppButton, Screen, ErrorMessage } from \"../components\";\n\nconst schema = z.object({\n    email: z.string().email().min(1, { message: \"Email is Required\" }),\n    password: z.string().min(4, { message: \"Password must be at least 4 characters \" }),\n});\n\nexport const LoginScreen = () => {\n    const {\n        control,\n        handleSubmit,\n        formState: { errors, dirtyFields, isValid },\n    } = useForm({\n        resolver: zodResolver(schema),\n        defaultValues: {\n            email: \"\",\n            password: \"\",\n        },\n        mode: \"onChange\",\n    });\n\n    const onSubmit = (/* data */) => null; /* console.log(data) */\n\n    return (\n        <Screen style={styles.container}>\n            <Image style={styles.logo} source={redLogo} />\n            <Controller\n                control={control}\n                rules={{\n                    required: true,\n                }}\n                render={({ field: { onChange, onBlur, value } }) => (\n                    <AppTextInput\n                        icon=\"email\"\n                        placeholder=\"Email\"\n                        autoCapitalize=\"none\"\n                        autoCorrect={false}\n                        keyboardType=\"email-address\"\n                        textContentType=\"emailAddress\"\n                        onBlur={onBlur}\n                        onChangeText={onChange}\n                        value={value}\n                    />\n                )}\n                name=\"email\"\n            />\n            <ErrorMessage error={errors.email?.message} visible={dirtyFields.email} />\n            <Controller\n                control={control}\n                rules={{\n                    required: true,\n                }}\n                render={({ field: { onChange, onBlur, value } }) => (\n                    <AppTextInput\n                        icon=\"lock\"\n                        placeholder=\"Password\"\n                        secureTextEntry\n                        textContentType=\"password\"\n                        onBlur={onBlur}\n                        onChangeText={onChange}\n                        value={value}\n                    />\n                )}\n                name=\"password\"\n            />\n            <ErrorMessage error={errors.password?.message} visible={dirtyFields.password} />\n\n            <AppButton disabled={!isValid} title=\"Login\" onPress={handleSubmit(onSubmit)} />\n        </Screen>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        paddingTop: 50,\n        paddingHorizontal: 10,\n        // justifyContent: \"space-between\",\n        // alignItems: \"center\",\n    },\n    logo: {\n        width: 80,\n        height: 80,\n        marginBottom: 10,\n        alignSelf: \"center\",\n    },\n});\n"]},"metadata":{},"sourceType":"module"}